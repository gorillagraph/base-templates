name: Publish

on:
  push:
    # Triggers the workflow on push events for the branches prefixed with "release-",
    # where the rest of the branch name typically represents the environment namespace.
    branches:
      - release-*

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to publish to
        type: environment
        required: true

jobs:
  set_environment:
    name: Set Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setenv.outputs.environment }}
    steps:
      - name: Determine Environment
        id: setenv
        run: |
          if [ -n "${{ inputs.environment }}" ]; then
            environment="${{ inputs.environment }}"
          else
            environment="${GITHUB_REF_NAME#release-}"
          fi
          echo "environment=$environment" >> $GITHUB_OUTPUT

  publish:
    name: Publish
    needs: set_environment
    runs-on: ubuntu-latest
    environment: ${{ needs.set_environment.outputs.environment }}

    permissions:
      contents: read
      id-token: write
      issues: write

    steps:
      - name: Check Configuration
        id: decode-token
        run: |
          if [ -n "${{ secrets.AUTH_TOKEN }}" ]; then
            # Use the secret
            AUTH_TOKEN="${{ secrets.AUTH_TOKEN }}"
          else
            # Fallback to the environment variable
            AUTH_TOKEN="${{ vars.AUTH_TOKEN }}"
          fi
          
          if [ -z "$AUTH_TOKEN" ]; then
            echo "AUTH_TOKEN is not set. Please ensure this variable is configured."
            exit 1
          fi
          
          DECODED_STRING=$(echo "$AUTH_TOKEN" | base64 --decode)
          IFS='|' read -ra PARTS <<< "$DECODED_STRING"
          
          if [ -z "${PARTS[0]}" ] || \
             [ -z "${PARTS[1]}" ]; then
            echo "AUTH_TOKEN is malformed. Please ensure the value is properly configured."
            exit 1
          fi
          
          echo "host=${PARTS[0]}" >> $GITHUB_OUTPUT
          echo "api_key=${PARTS[1]}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4

      - name: Process contents of templates folder
        id: process-data
        run: zip -r ../templates.zip .
        working-directory: ${{ github.workspace }}/templates

      - name: Validate templates
        id: validate
        run: |
          HOST_URL="https://${{ steps.decode-token.outputs.host }}/api/templates/zip/validate"
          AUTH_TOKEN="Auth-Token: ${{ steps.decode-token.outputs.api_key }}"
          BASE64_ENCODED=$(base64 -w 0 templates.zip)
          MD5SUM=$(md5sum templates.zip | awk '{print $1}')
          
          JSON_DATA='{
            "file": {
              "filename": "templates.zip",
              "md5": "'"$MD5SUM"'",
              "data": "'"$BASE64_ENCODED"'"
            }
          }'
          
          RESPONSE=$(curl -X POST -H "Content-Type: application/json" -H "$AUTH_TOKEN" -d "$JSON_DATA" "$HOST_URL")
          echo $RESPONSE
          
          IGNORED=$(echo $RESPONSE | jq '.data.ignored | to_entries')
          HAS_IGNORED=$(echo "$IGNORED" | jq 'length > 0')
          IGNORED_MSG=$(echo "$IGNORED" | jq -r 'map("- **\(.key)**: \(.value)\n") | join("")')
          
          echo "has_ignored=${HAS_IGNORED}" >> $GITHUB_OUTPUT
          echo "ignored_msg=${IGNORED_MSG}" >> $GITHUB_OUTPUT

      - uses: trstringer/manual-approval@v1
        if: ${{ steps.validate.outputs.has_ignored == 'true' }}
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Action Required for Specific Files"
          issue-body: "Certain files have been identified that cannot be processed due to the reasons listed below. These files will be excluded from the deployment:\n
          ${{ steps.validate.outputs.ignored_msg }}\n\n
          By approving, you agree to proceed with the deployment by excluding these files. If you prefer to review or modify these files, cancel this deployment and adjust your files accordingly."

      - name: Push templates
        run: |
          HOST_URL="https://${{ steps.decode-token.outputs.host }}/api/templates/zip"
          AUTH_TOKEN="Auth-Token: ${{ steps.decode-token.outputs.api_key }}"
          BASE64_ENCODED=$(base64 -w 0 templates.zip)
          MD5SUM=$(md5sum templates.zip | awk '{print $1}')
          
          JSON_DATA='{
            "file": {
              "filename": "templates.zip",
              "md5": "'"$MD5SUM"'",
              "data": "'"$BASE64_ENCODED"'"
            }
          }'
          
          RESPONSE=$(curl -X POST -H "Content-Type: application/json" -H "$AUTH_TOKEN" -d "$JSON_DATA" "$HOST_URL")
          STATUS=$(echo $RESPONSE | jq -r '.status')
    
          if [ "$STATUS" != "true" ]; then
            echo "Deployment failed. Reason: $RESPONSE"
            exit 1
          fi
